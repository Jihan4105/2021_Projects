{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ScheduleType from \"./ScheduleType\";\nimport ScheduleStatus from \"./ScheduleStatus\";\nimport ToDoListDatePicker from './ToDoListDatePicker';\nimport ToDoListTimePicker from './ToDoListTimePicker';\nimport axios from 'axios';\nimport { fil } from 'date-fns/locale';\nexport default function ScheduleFormCUD(props) {\n  _s();\n\n  let selectedTime = props.mode === \"create\" ? new Date() : new Date(props.rowdata.date + \" \" + props.rowdata.time);\n  let disabled;\n  let formTitle;\n\n  if (props.mode === \"create\") {\n    disabled = false;\n    formTitle = \"New Schedule\";\n  } else if (props.mode === \"show\") {\n    disabled = true;\n    formTitle = \"View Schedule\";\n  } else if (props.mode === \"update\") {\n    formTitle = \"Edit Schedule\";\n  }\n\n  const [inputs, setInputs] = useState({\n    title: props.mode === \"create\" ? \"\" : props.rowdata.tile,\n    contents: props.mode === \"create\" ? \"\" : props.rowdata.contents,\n    type: props.mode === \"create\" ? \"plan\" : props.rowdata.type,\n    status: props.mode === \"create\" ? \"notyet\" : props.rowdata.status\n  });\n  const {\n    title,\n    contents,\n    type,\n    status\n  } = inputs;\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      [name]: value\n    });\n  };\n\n  const ChangeTime = newTime => {\n    selectedTime = newTime;\n  };\n\n  const createSchedule = () => {\n    const fillZero = num => num < 10 && num >= 0 ? \"0\" + num : num;\n\n    let date = props.selectedDate.getFullYear() + \"-\" + fillZero(props.selectedDate.getMonth() + 1) + \"-\" + fillZero(props.selectedDate.getDate());\n    let time = fillZero(selectedTime.getHours()) + \":\" + fillZero(selectedTime.getMinutes());\n    axios.post('http://localhost:3001/todolist/create', {\n      date: date,\n      time: time,\n      title: title,\n      contents: contents,\n      type: type\n    });\n  };\n}\n\n_s(ScheduleFormCUD, \"CwTgnGGez9ops6uQ8kx6oNfIPWE=\");\n\n_c = ScheduleFormCUD;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScheduleFormCUD\");","map":{"version":3,"sources":["D:/NodejsProject/todolist/client/src/components/ScheduleFormCUD.js"],"names":["React","useState","TextField","Grid","Button","ScheduleType","ScheduleStatus","ToDoListDatePicker","ToDoListTimePicker","axios","fil","ScheduleFormCUD","props","selectedTime","mode","Date","rowdata","date","time","disabled","formTitle","inputs","setInputs","title","tile","contents","type","status","onChange","e","name","value","target","ChangeTime","newTime","createSchedule","fillZero","num","selectedDate","getFullYear","getMonth","getDate","getHours","getMinutes","post"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport ScheduleType from \"./ScheduleType\";\r\nimport ScheduleStatus from \"./ScheduleStatus\";\r\nimport ToDoListDatePicker from './ToDoListDatePicker';\r\nimport ToDoListTimePicker from './ToDoListTimePicker';\r\nimport axios from 'axios';\r\nimport { fil } from 'date-fns/locale';\r\n\r\nexport default function ScheduleFormCUD(props) {\r\n\r\n    let selectedTime = (props.mode === \"create\") ? new Date() : new Date(props.rowdata.date + \" \" + props.rowdata.time);\r\n    let disabled;\r\n    let formTitle;\r\n\r\n    if(props.mode === \"create\") {\r\n        disabled = false;\r\n        formTitle = \"New Schedule\";\r\n    }\r\n    else if(props.mode === \"show\"){\r\n        disabled = true;\r\n        formTitle = \"View Schedule\";\r\n    }\r\n    else if(props.mode === \"update\"){\r\n        formTitle = \"Edit Schedule\";\r\n    }\r\n\r\n    const [inputs, setInputs] = useState({\r\n        title: (props.mode === \"create\") ? \"\" : props.rowdata.tile,\r\n        contents: (props.mode === \"create\") ? \"\" : props.rowdata.contents,\r\n        type: (props.mode === \"create\" ) ? \"plan\" : props.rowdata.type,\r\n        status: (props.mode === \"create\") ? \"notyet\" : props.rowdata.status\r\n    });\r\n\r\n    const {title, contents, type, status} = inputs;\r\n\r\n    const onChange = (e) => {\r\n        const {name, value} = e.target;\r\n\r\n        setInputs({\r\n            ...inputs,\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    const ChangeTime = (newTime) => {\r\n        selectedTime = newTime;\r\n    }\r\n\r\n    const createSchedule = () => {\r\n\r\n        const fillZero = (num) => num<10 && num>=0 ? \"0\" + num : num;\r\n\r\n        let date = props.selectedDate.getFullYear()+ \"-\" +\r\n                    fillZero(props.selectedDate.getMonth()+1) + \"-\" +\r\n                    fillZero(props.selectedDate.getDate());\r\n\r\n        let time = fillZero(selectedTime.getHours())+\":\"+\r\n                    fillZero(selectedTime.getMinutes());\r\n\r\n        axios.post('http://localhost:3001/todolist/create', {\r\n            date: date,\r\n            time: time,\r\n            title: title,\r\n            contents: contents,\r\n            type: type,\r\n\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}