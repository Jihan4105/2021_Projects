{"ast":null,"code":"var _jsxFileName = \"D:\\\\NodejsProject\\\\todolist\\\\client\\\\src\\\\pages\\\\ScheduleR.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid'; // import SearchPannel from \"../components/SearchPannel\";\n\nimport ListAndFormR from \"../components/ListAndFormR\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ScheduleR() {\n  _s();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const [serachedRows, setSearchedRows] = useState([]);\n  useEffect(() => {\n    searchList();\n  }, [currentPage]);\n  let [fromDate, setFromDate] = useState(new Date('1900-01-01'));\n  let [toDate, setToDate] = useState(new Date('2099-12-31'));\n  const [keyword, setKeyword] = useState('');\n  const [valType, setValType] = useState({\n    plan: true,\n    promise: true,\n    duty: true\n  });\n  const [valStatus, setValStatus] = useState({\n    notyet: true,\n    done: true,\n    canceled: true\n  });\n\n  const searchList = () => {\n    if (fromDate === null || isNaN(Date.parse(fromDate))) {\n      fromDate = new Date('1900-01-01');\n    }\n\n    if (toDate === null || isNaN(Date.parse(toDate))) {\n      toDate = new Date('2099-12-31');\n    }\n\n    if (isNaN(Date.parse(fromDate)) || isNaN(Date.parse(toDate))) {\n      alert(\"잘못된 날짜 형식입니다.\");\n      return;\n    }\n\n    if (valType.plan === false && valType.promise === false && valType.duty === false) {\n      alert(\"Type은 하나 이상 선택되어야 합니다.\");\n      return;\n    }\n\n    if (valStatus.notyet === false && valStatus.done === false && valStatus.canceled === false) {\n      alert('Status는 하나 이상 선택되어야 합니다.');\n      return;\n    }\n\n    const fillZero = num => num < 10 && num >= 0 ? \"0\" + num : num;\n\n    if (fromDate !== null) {\n      fromDate = fromDate.getFullYear() + \"-\" + fillZero(fromDate.getMonth() + 1) + \"-\" + fillZero(fromDate.getDate());\n    } else {\n      fromDate = \"1900-01-01\";\n    }\n\n    if (toDate !== null) {\n      toDate = toDate.getFullYear() + \"-\" + fillZero(toDate.getMonth() + 1) + \"-\" + fillZero(toDate.getDate());\n    } else {\n      toDate = '2099-12-31';\n    }\n\n    let offset = (currentPage - 1) * 10;\n    axios.get('http://localhost:3001/todolist/serach_all', {\n      params: {\n        mode: \"total\",\n        offset: offset,\n        fromDate: fromDate,\n        toDate: toDate,\n        keyword: keyword,\n        valType: valType,\n        valStatus: valStatus\n      }\n    }).then(response => {\n      let pageCount = parseInt(response.data.rows[0].count / 10);\n\n      if (response.data.rows[0].count % 10 > 0) {\n        pageCount++;\n      }\n\n      setTotalPage(pageCount);\n      axios.get('http://localhost:3001/todolist/serach_all', {\n        params: {\n          mode: \"page\",\n          offset: offset,\n          fromDate: fromDate,\n          toDate: toDate,\n          keyword: keyword,\n          valType: valType,\n          valStatus: valStatus\n        }\n      }).then(response => {\n        setSearchedRows(response.data.rows);\n      });\n    }).catch(error => {\n      setSearchedRows([]);\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 0,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(SearchPannel, {\n            setSearchedRows: setSearchedRows,\n            setFromDate: setFromDate,\n            setToDate: setToDate,\n            keyword: keyword,\n            setKeyword: setKeyword,\n            setValType: setValType,\n            setValStatus: setValStatus,\n            serachList: serachList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: '0px 20px 0px 20px'\n          },\n          children: /*#__PURE__*/_jsxDEV(ListAndFormR, {\n            isListOrForm: \"list\",\n            setCurrentPage: setCurrentPage,\n            totalPage: totalPage,\n            setTotalPage: setTotalPage,\n            searchedRows: serachedRows,\n            searchList: searchList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ScheduleR, \"8lkxPy5LrMjhsIA0Pt4AMkKUlmo=\");\n\n_c = ScheduleR;\nexport default ScheduleR;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScheduleR\");","map":{"version":3,"sources":["D:/NodejsProject/todolist/client/src/pages/ScheduleR.js"],"names":["React","useState","useEffect","Grid","ListAndFormR","axios","ScheduleR","currentPage","setCurrentPage","totalPage","setTotalPage","serachedRows","setSearchedRows","searchList","fromDate","setFromDate","Date","toDate","setToDate","keyword","setKeyword","valType","setValType","plan","promise","duty","valStatus","setValStatus","notyet","done","canceled","isNaN","parse","alert","fillZero","num","getFullYear","getMonth","getDate","offset","get","params","mode","then","response","pageCount","parseInt","data","rows","count","catch","error","console","log","display","justifyContent","serachList","padding"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n// import SearchPannel from \"../components/SearchPannel\";\r\nimport ListAndFormR from \"../components/ListAndFormR\";\r\nimport axios from 'axios';\r\n\r\nfunction ScheduleR() {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(0);\r\n    const [serachedRows, setSearchedRows] = useState([]);\r\n\r\n    useEffect (() =>{\r\n        searchList();\r\n    }, [currentPage]);\r\n\r\n    let [fromDate, setFromDate] = useState(new Date('1900-01-01'));\r\n    let [toDate, setToDate] = useState(new Date('2099-12-31'));\r\n\r\n    const [keyword, setKeyword] = useState('');\r\n\r\n    const [valType, setValType] = useState({\r\n        plan: true,\r\n        promise: true,\r\n        duty: true\r\n    });\r\n\r\n    const [valStatus, setValStatus] = useState({\r\n        notyet: true,\r\n        done: true,\r\n        canceled: true\r\n    })\r\n\r\n    const searchList = () => {\r\n\r\n        if(fromDate === null || isNaN(Date.parse(fromDate))) {\r\n            fromDate = new Date('1900-01-01');\r\n        }\r\n        if(toDate === null || isNaN(Date.parse(toDate))) {\r\n            toDate = new Date('2099-12-31');\r\n        }\r\n\r\n        if(isNaN(Date.parse(fromDate)) || isNaN(Date.parse(toDate))) {\r\n            alert(\"잘못된 날짜 형식입니다.\");\r\n            return;\r\n        }\r\n\r\n        if(valType.plan === false && valType.promise === false && valType.duty === false) {\r\n            alert(\"Type은 하나 이상 선택되어야 합니다.\");\r\n            return;\r\n        }\r\n\r\n        if(valStatus.notyet === false && valStatus.done === false && valStatus.canceled === false){\r\n            alert('Status는 하나 이상 선택되어야 합니다.')\r\n            return;\r\n        }\r\n\r\n        const fillZero = (num) => num<10 && num>=0 ? \"0\" + num : num;\r\n\r\n        if(fromDate !== null){\r\n            fromDate = fromDate.getFullYear() + \"-\" +\r\n                        fillZero(fromDate.getMonth() +1 ) + \"-\" +\r\n                        fillZero(fromDate.getDate());\r\n        }\r\n        else{\r\n            fromDate = \"1900-01-01\";\r\n        }\r\n\r\n        if(toDate !== null){\r\n            toDate = toDate.getFullYear() + \"-\" +\r\n                        fillZero(toDate.getMonth() + 1 ) + \"-\" +\r\n                        fillZero(toDate.getDate());\r\n        }\r\n        else{\r\n            toDate = '2099-12-31';\r\n        }\r\n\r\n        let offset =(currentPage - 1 ) * 10;\r\n\r\n        axios.get('http://localhost:3001/todolist/serach_all', {\r\n            params: {\r\n                mode: \"total\",\r\n                offset: offset,\r\n                fromDate: fromDate,\r\n                toDate: toDate,\r\n                keyword: keyword,\r\n                valType: valType,\r\n                valStatus: valStatus\r\n            }\r\n        })\r\n        .then((response) => {\r\n\r\n            let pageCount = parseInt(response.data.rows[0].count / 10);\r\n            if((response.data.rows[0].count % 10) > 0) {\r\n                pageCount++;\r\n            }\r\n            setTotalPage(pageCount);\r\n\r\n            axios.get('http://localhost:3001/todolist/serach_all', {\r\n                params: {\r\n                    mode: \"page\",\r\n                    offset: offset,\r\n                    fromDate: fromDate,\r\n                    toDate: toDate,\r\n                    keyword: keyword,\r\n                    valType: valType,\r\n                    valStatus: valStatus\r\n                }\r\n            })\r\n            .then((response) => {\r\n                setSearchedRows(response.data.rows);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            setSearchedRows([]);\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={0}>\r\n                <Grid item xs={12} md={4}>\r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <SearchPannel\r\n                            setSearchedRows = {setSearchedRows}\r\n                            setFromDate = {setFromDate}\r\n                            setToDate = {setToDate}\r\n                            keyword = {keyword}\r\n                            setKeyword = {setKeyword}\r\n                            setValType = {setValType}\r\n                            setValStatus = {setValStatus}\r\n                            serachList = {serachList}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={8}>\r\n                    <div style={{padding: '0px 20px 0px 20px'}}>\r\n                        <ListAndFormR\r\n                            isListOrForm = \"list\"\r\n                            setCurrentPage = {setCurrentPage}\r\n                            totalPage = {totalPage}\r\n                            setTotalPage = {setTotalPage}\r\n                            searchedRows = {serachedRows}\r\n                            searchList ={searchList}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScheduleR;"]},"metadata":{},"sourceType":"module"}